<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_reaperDown</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_reaperMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//------------------
//---Player movement
//------------------

bKeyDirectionIsPressed = false
bKeyDirectionIsReleased = false

//Check for arrow key or WASD presses
if keyboard_check_pressed(vk_right) or keyboard_check_pressed(ord('D')) {
    keyDirection = RIGHT
    bKeyDirectionIsPressed = true
}
else if keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord('W')) {
    keyDirection = UP
    bKeyDirectionIsPressed = true
}
else if keyboard_check_pressed(vk_left) or keyboard_check_pressed(ord('A')) {
    keyDirection = LEFT
    bKeyDirectionIsPressed = true
}
else if keyboard_check_pressed(vk_down) or keyboard_check_pressed(ord('S')) {
    keyDirection = DOWN
    bKeyDirectionIsPressed = true
}

//Check for arrow key or WASD releases, to deal with movement key clashes.
if keyboard_check_released(vk_right)
or keyboard_check_released(vk_up)
or keyboard_check_released(vk_left)
or keyboard_check_released(vk_down)
or keyboard_check_released(ord('D'))
or keyboard_check_released(ord('W'))
or keyboard_check_released(ord('A'))
or keyboard_check_released(ord('S')) {
    bKeyDirectionIsReleased = true
    keyDirection = -1   //Clear direction state
    
    if keyboard_check(vk_right) or keyboard_check(ord('D'))
        keyDirection = RIGHT
    else if keyboard_check(vk_up) or keyboard_check(ord('W'))
        keyDirection = UP
    else if keyboard_check(vk_left) or keyboard_check(ord('A'))
        keyDirection = LEFT
    else if keyboard_check(vk_down) or keyboard_check(ord('S'))
        keyDirection = DOWN
}

//Set speed and direction when key pressed
if bKeyDirectionIsPressed {
    speed = REAPER_SPEED
    direction = keyDirection
    image_speed = .1   //Start animation
}

//Set speed and direction when key released
if bKeyDirectionIsReleased {
    if keyDirection == -1 {
        speed = 0   //Stop if no direction is pressed
        image_speed = 0
    }
    else
        direction = keyDirection
}

if bKeyDirectionIsPressed or bKeyDirectionIsReleased {
    if keyDirection == RIGHT
        sprite_index = spr_reaperRight
    else if keyDirection == UP
        sprite_index = spr_reaperUp
    else if keyDirection == LEFT
        sprite_index = spr_reaperLeft
    else if keyDirection == DOWN
        sprite_index = spr_reaperDown
}

//Prevent the player from leaving the room
if bbox_left &lt; 0
    do { x += 1 } until bbox_left == 0
if bbox_right &gt; room_width
    do { x -= 1 } until bbox_right == room_width
if bbox_top &lt; 0
    do { y += 1 } until bbox_top == 0
if bbox_bottom &gt; room_height
    do  { y-=1 } until bbox_bottom == room_height



//---------------------
//---Prevent collisions
//---------------------

if place_meeting(x + hspeed, y, citizen)
    hspeed = 0
if place_meeting(x, y + vspeed, citizen)
    vspeed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
