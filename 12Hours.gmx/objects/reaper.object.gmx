<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprReaperDown</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar g_keyDirection, g_bKeyDirectionIsPressed, g_bKeyDirectionIsReleased;

g_keyDirection = -1;   //-1 to ensure no initial false input.
g_bKeyDirectionIsPressed = false;
g_bKeyDirectionIsReleased = false;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_bKeyDirectionIsPressed = false;
g_bKeyDirectionIsReleased = false;

//Check for ARROW or WASD presses
if (keyboard_check_pressed(vk_right) or keyboard_check_pressed(ord('D'))) {
    g_keyDirection = 0;
    //sprite_index = sprReaperRight;
    g_bKeyDirectionIsPressed = true;
}
else if (keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord('W'))) {
    g_keyDirection = 90;
    //sprite_index = sprReaperUp;
    g_bKeyDirectionIsPressed = true;
}
else if (keyboard_check_pressed(vk_left) or keyboard_check_pressed(ord('A'))) {
    g_keyDirection = 180;
    //sprite_index = sprReaperLeft;
    g_bKeyDirectionIsPressed = true;
}
else  if (keyboard_check_pressed(vk_down) or keyboard_check_pressed(ord('S'))) {
    g_keyDirection = 270;
    //sprite_index = sprReaperDown;
    g_bKeyDirectionIsPressed = true;
}

//Deal with key clashes

//Check for ARROW or WASD releases
if (keyboard_check_released(vk_right) //Arrow keys
or  keyboard_check_released(vk_up)
or  keyboard_check_released(vk_left)
or  keyboard_check_released(vk_down)
or  keyboard_check_released(ord('D')) //WASD keys
or  keyboard_check_released(ord('W'))
or  keyboard_check_released(ord('A'))
or  keyboard_check_released(ord('S'))) {
    g_bKeyDirectionIsReleased = true;
    g_keyDirection = -1;   //Clear direction state
    
    if (keyboard_check(vk_right) or keyboard_check(ord('D'))) {
        g_keyDirection = 0;
        //sprite_index = sprReaperDown;
    }
    else if (keyboard_check(vk_up) or keyboard_check(ord('W'))) {
        g_keyDirection = 90;
        //sprite_index = sprReaperDown;
    }
    else if (keyboard_check(vk_left) or keyboard_check(ord('A'))) {
        g_keyDirection = 180;
        //sprite_index = sprReaperDown;
    }
    else if (keyboard_check(vk_down) or keyboard_check(ord('S'))) {
        g_keyDirection = 270;
        //sprite_index = sprReaperDown;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set speed and direction when key pressed
if (g_bKeyDirectionIsPressed) {
    speed = 4;
    direction = g_keyDirection;
    image_speed = .2;   //Start animation
    
    if (g_keyDirection == 0)
        sprite_index = sprReaperRight;
    else if (g_keyDirection == 90)
        sprite_index = sprReaperUp;
    else if (g_keyDirection == 180)
        sprite_index = sprReaperLeft;
    else if (g_keyDirection == 270)
        sprite_index = sprReaperDown;
}

//Set speed and direction when key released
if (g_bKeyDirectionIsReleased) {
    if (g_keyDirection == -1) {
        speed = 0;   //Stop if no direction is pressed
        image_speed = 0;   //Stop animation
    }
    else {
        direction = g_keyDirection;
    
    if (g_keyDirection == 0)
        sprite_index = sprReaperRight;
    else if (g_keyDirection == 90)
        sprite_index = sprReaperUp;
    else if (g_keyDirection == 180)
        sprite_index = sprReaperLeft;
    else if (g_keyDirection == 270)
        sprite_index = sprReaperDown;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
