<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Globals
globalvar g_levelSeconds, g_levelStartTime, g_levelDuration, g_health;
g_health = HEALTH_MAX
g_levelStartTime = current_time
g_levelSeconds = 12 * 60
//g_levelSeconds = 5   //TODO remove
g_levelDuration = g_levelSeconds * 1000

alarm[0] = SECOND
alarm[1] = SECOND * g_levelSeconds
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TODO end game properly

//TODO remove
ShowDialogue(reaper, 'Game over.', 2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_health -= HEALTH_UNIT
alarm[0] = SECOND
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Hotkey for exiting game
if keyboard_check(vk_control) and keyboard_check(ord('Q'))
    game_end()

//Hotkey for toggling fullscreen
if keyboard_check_pressed(vk_f11) {
    if window_get_fullscreen() {
        window_set_fullscreen(false)
    }
    else {
        window_set_fullscreen(true)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//--------------------------
//--Calculate clock progress
//--------------------------

millisecondsLeft = g_levelDuration - (current_time - g_levelStartTime - 1000)   //The 1000 is a mathematical convenience, for printing purposes; without it, the clock will be 1 second fast.

//TODO remove: test having only 10 seconds left
//millisecondsLeft = g_levelDuration - (current_time + 60 * 1000 * 11 + 50 * 1000 - g_levelStartTime - 1000)

secondsLeft = floor(millisecondsLeft / 1000)
minutesLeft = floor(secondsLeft / 60)
secondsLeft -= minutesLeft * 60

if minutesLeft &lt; 0 {
    secondsLeft = 0
    minutesLeft = 0
}

secondsStr = string(secondsLeft)
if string_length(secondsStr) == 1
    secondsStr = '0' + secondsStr


//------------------
//--Draw UI elements
//------------------

//Draw clock
draw_set_colour(c_white)
draw_set_halign(fa_left)
draw_text(view_xview[0] + 15, view_yview[0] + 20, string(minutesLeft) + ':' + secondsStr)

draw_healthbar(view_xview[0] + 20, view_yview[0] + 45, view_xview[0] + 30, view_yview[0] + 165, g_health, make_color_rgb(48, 44, 44), c_red, c_blue, 3, true, true)

//Unnecessary; this would be used if there were an actual sprite associated with this object
//draw_sprite(sprite_index, image_index, x, y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
