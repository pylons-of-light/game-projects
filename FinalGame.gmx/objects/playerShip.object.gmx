<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerShip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>navalBlock</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if g_showFirstShipDeathMsg {
    ShowDialogue('first_ship_death')
    g_showFirstShipDeathMsg = false
}

if room == rm_final_ship_boss {
    if not g_finalCinematic {
        x = 320
        y = 700
        g_shipDir = 20
    }
    else {
        x = 544
        y = 416
        g_shipDir = 250
    }
}
else {
    x = g_shipX
    y = g_shipY
    image_angle = g_shipDir
}


lastFiredTime = current_time
cbFlyTime = 150
cbSpeed = 4
//cbFireDelay = 800
dealCannonDamage = SHIP_HEALTH_MAX / 15

bDying = false

crashPainDelay = 500
lastCrashedTime = current_time - crashPainDelay


acceleration = 0.1   //Changes based on speed
friction = 0.009
driftSpeed = 0   //The speed at which the ship is drifting (after braking)
direction = image_angle

rightTurnSpeed = 0
leftTurnSpeed = 0
turnSpeedMax = 8   //Limits left turn speed and right turn speed
turnSpeedIndicator = 0   //Will be negative for left and positive for right
turnSpeedLimiter = 0

//Constants
//maxSpeed = 4
turnSteeringSpeed = 0.4   //The higher this number, the faster the turning will adjust
driftTraction = 0.025   //The lower this number, the longer a drift will hold
divBrakeSpeed = 60   //The smaller this number, the faster the ship will slow down when braking
divSpeedTurnAdjustment = 80   //The higher this number, the less speed is effected by turning

//Old values, for a 30fps room
/*
acceleration = 0.1   //Changes based on speed
friction = 0.009
driftSpeed = 0   //The speed at which the ship is drifting (after braking)
direction = image_angle

rightTurnSpeed = 0
leftTurnSpeed = 0
turnSpeedMax = 10   //Limits left turn speed and right turn speed
turnSpeedIndicator = 0   //Will be negative for left and positive for right
turnSpeedLimiter = 0

//Constants
maxSpeed = 16
turnSteeringSpeed = 0.8   //The higher this number, the faster the turning will adjust
driftTraction = 0.05   //The lower this number, the longer a drift will hold
divBrakeSpeed = 60   //The smaller this number, the faster the ship will slow down when braking
divSpeedTurnAdjustment = 100   //The higher this number, the less speed is effected by turning
*/

recoverTime = room_speed * 3
alarm[0] = recoverTime
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if g_shipHealth &lt; SHIP_HEALTH_MAX {
    if g_recruitedHenry
        g_shipHealth = min(g_shipHealth + 2, SHIP_HEALTH_MAX)
    else
        g_shipHealth = min(g_shipHealth + 1.5, SHIP_HEALTH_MAX)
}

alarm[0] = recoverTime
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not ds_list_empty(g_dlg) or instance_exists(tutorialMgr) {
    speed *= .9   //We're in a cinematic or something? Slow down if we were moving.
    exit
}

if g_shipHealth &lt;= 0 {
    bDying = true
}

if bDying {
    image_alpha -= .02
    if image_alpha &lt;= 0 {
        //Die in a ship battle
        g_shipX = g_shipLastPortX
        g_shipY = g_shipLastPortY
        g_shipDir = g_shipLastPortDir
        DieLoseGold()
        g_shipHealth = SHIP_HEALTH_MAX
        
        if g_firstShipDeath {
            g_showFirstShipDeathMsg = true
            g_firstShipDeath = false
        }
        
        room_restart()
    }
}

if bDying {
    speed *= 0.99
    exit
}

//Prevent the ship from leaving the room
if x &gt; room_width {
    x = room_width
    speed = 0
}
else if x &lt; 0 {
    x = 0
    speed = 0
}
if y &gt; room_height {
    y = room_height
    speed = 0
}
else if y &lt; 0 {
    y = 0
    speed = 0
}

//Go forwards
if keyboard_check(ord('W')) or keyboard_check(vk_up) {
    if speed &gt; 0
        friction = 0.01
    if speed &gt; 0.5
        turnSpeedLimiter = 0
    if driftSpeed &gt; 0
        speed += acceleration - driftSpeed/50
    else
        speed += acceleration
}
else {
    if speed &gt; 0.5
        friction = speed/100
    else
        friction = 0.01
}

//Reverse
if keyboard_check(ord('S')) or keyboard_check(vk_down)
    speed -= acceleration

if speed &gt; 0
    turnSpeedIndicator = (leftTurnSpeed - rightTurnSpeed)/(5.5 + turnSpeedLimiter)
if speed &lt; 0   //Reversing?
    turnSpeedIndicator = -((leftTurnSpeed - rightTurnSpeed) / (5.5 + turnSpeedLimiter))
image_angle += turnSpeedIndicator   //Adjust the ship angle based on the turning angle

if speed &gt; 0 {
    if turnSpeedIndicator &gt; 0
        image_angle += driftSpeed
    if turnSpeedIndicator &lt; 0
        image_angle -= driftSpeed
}

if keyboard_check(ord('A')) or keyboard_check(vk_left) {
    if leftTurnSpeed &lt; turnSpeedMax {
        if speed &gt; 0
            leftTurnSpeed += turnSteeringSpeed + speed/10
        else
            leftTurnSpeed += turnSteeringSpeed - speed/10
    }
}

if keyboard_check(ord('D')) or keyboard_check(vk_right) {
    if rightTurnSpeed &lt; turnSpeedMax {
        if speed &gt; 0
            rightTurnSpeed += turnSteeringSpeed + speed/10
        else
            rightTurnSpeed += turnSteeringSpeed - speed/10
    }
}

if leftTurnSpeed &gt; 0
    leftTurnSpeed -= turnSteeringSpeed-0.1
if leftTurnSpeed &lt; 0
    leftTurnSpeed = 0
if rightTurnSpeed &gt; 0
    rightTurnSpeed -= turnSteeringSpeed-0.1
if rightTurnSpeed &lt; 0
    rightTurnSpeed = 0

if speed &lt; 0
    turnSpeedLimiter = 0   //Once the ship is rolling slowly, prevent unrealistic turning at very slow speeds
else if speed == 0 {
    turnSpeedIndicator = 0
    speed = 0
    leftTurnSpeed = 0
    rightTurnSpeed = 0
    turnSpeedLimiter = 0
}

if speed &lt; 2 {
    if speed &gt; 0 {
        if !keyboard_check(ord('W')) then {
            if turnSpeedLimiter &lt; 6
                turnSpeedLimiter += 0.175
        }
    }
}
else {
    if turnSpeedLimiter &gt; 0
        turnSpeedLimiter -= 0.1
}

if speed &gt; g_shipMaxSpeed
    speed = g_shipMaxSpeed   //Limit the ship speed
if speed &lt; -g_shipMaxSpeed/1.5
    speed = -g_shipMaxSpeed/1.5   //Limit the ship speed in reverse

if driftSpeed &gt; 0
    driftSpeed -= driftTraction   //If the ship is drifting slowly, decrease the drift speed

if speed &lt; -0.5
    friction = -speed/25   //Friction of the ship in reverse. Make the div number lower to increase friction, or higher to decrease friction.

if speed &lt; 0 {
    if speed &gt; -0.5 {
        friction = 0.01
        if leftTurnSpeed &gt; 0
            leftTurnSpeed -= 0.7
        if rightTurnSpeed &gt; 0
            rightTurnSpeed -= 0.7
    }
}

if keyboard_check(vk_control) {
    if speed &gt; 0
        speed -= speed/divBrakeSpeed
    if speed &lt; 0
        speed -= speed/(divBrakeSpeed/2)
    if driftSpeed &lt; speed/4
        driftSpeed += speed/4.5
}
speed -= driftSpeed/100   //If braking, start drifting and adjust the speed

//If the ship is turning, adjust the speed
if turnSpeedIndicator &gt; 0
    speed -= turnSpeedIndicator / divSpeedTurnAdjustment
if turnSpeedIndicator &lt; 0
    speed += turnSpeedIndicator / divSpeedTurnAdjustment

//Adjust acceleration based on speed; the faster we're going, the slower the acceleration
//If speed is negative (indicating reverse), do not adjust acceleration
if speed &gt;= 0 then acceleration = 0.08
if speed &gt; 2 then acceleration = 0.05
if speed &gt; 4 then acceleration = 0.04
if speed &gt; 5 then acceleration = 0.03
if speed &gt; 6 then acceleration = 0.02
if speed &gt; 7 then acceleration = 0.015

if image_angle &gt; 360
    image_angle = 0
else if image_angle &lt; 0
    image_angle = 360

if direction &gt; 360
    direction = 0
else if direction &lt; 0
    direction = 360

var one, two, three;
one = 1.7 + ((g_shipMaxSpeed - speed)/10)   //The number used is arbitrary
two = -one
three = ((((image_angle - direction) mod 360) + 540) mod 360) - 180
direction += median(one, two, three)   //Adjust the direction based on the image angle. This allows for drift because direction adjusts slower than the image_angle does.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="specialShip2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not g_shipwreckExamined {
    ShowDialogue('ship_examine_wreck')
    g_shipwreckExamined = true
}

ShipCollide()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="navalBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ShipCollide()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="dungeon2Port">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_shipLastPortX = g_dungeon2X
g_shipLastPortY = g_dungeon2Y
g_shipLastPortDir = g_dungeon2Dir

if not g_bossShipBeaten {
    //g_townId = 'finalShipBoss'
    room_goto(rm_final_ship_boss)
}
else {
    //g_townId = 'dungeon2'
    room_goto(rm_cave)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="dungeon1Port">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_shipLastPortX = g_dungeon1X
g_shipLastPortY = g_dungeon1Y
g_shipLastPortDir = g_dungeon1Dir
//g_townId = 'dungeon1'
room_goto(rm_dungeon_test2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="town5Port">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_shipLastPortX = g_town5X
g_shipLastPortY = g_town5Y
g_shipLastPortDir = g_town5Dir
g_townId = 'town5'
room_goto(rm_town)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="town4Port">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_shipLastPortX = g_town4X
g_shipLastPortY = g_town4Y
g_shipLastPortDir = g_town4Dir
g_townId = 'town4'
room_goto(rm_town)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="town3Port">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_shipLastPortX = g_town3X
g_shipLastPortY = g_town3Y
g_shipLastPortDir = g_town3Dir
g_townId = 'town3'
room_goto(rm_town)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="town2Port">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_shipLastPortX = g_town2X
g_shipLastPortY = g_town2Y
g_shipLastPortDir = g_town2Dir
g_townId = 'town2'
room_goto(rm_town)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="town1Port">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_shipLastPortX = g_town1X
g_shipLastPortY = g_town1Y
g_shipLastPortDir = g_town1Dir
g_townId = 'town1'
room_goto(rm_town)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="terrain">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if current_time - lastCrashedTime &gt;= crashPainDelay and ds_list_empty(g_dlg)
   and not instance_exists(tutorialMgr) {
    g_shipHealth -= SHIP_HEALTH_MAX / 30
    lastCrashedTime = current_time
}

ShipCollide()

if not g_bCrashedReefs {
    ShowDialogue('reef_crash')
    g_bCrashedReefs = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not ds_list_empty(g_dlg) or instance_exists(tutorialMgr)
    exit

PlayerShipFire()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.200000002980232</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>76,76</point>
  </PhysicsShapePoints>
</object>
