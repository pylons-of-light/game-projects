<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawXOffset = (view_wview[0] - sprite_get_width(spr_minimap)) / 2
drawYOffset = (view_hview[0] - sprite_get_height(spr_minimap)) / 2
drawWidth = sprite_get_width(spr_minimap)
drawHeight = sprite_get_height(spr_minimap)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_shift) or keyboard_check(ord('Q')) or keyboard_check(ord('E')) {
    draw_set_alpha(0.8)
    drawX = view_xview[0] + drawXOffset
    drawY = view_yview[0] + drawYOffset
    draw_sprite(spr_minimap, 0, drawX, drawY)
    
    draw_sprite(spr_minimapPlayer, 0, drawX + drawWidth * (playerShip.x / room_width),
                                      drawY + drawHeight * (playerShip.y / room_height))
    
    //Note that this limits markers to special NPCs or NPCs within a certain distance of the player's ship.
    with(npcShip) {
        //if true {
        var objName = object_get_name(object_index);
        var bSpecialShip = objName != 'merchantShip' and objName != 'warship';
        if distance_to_object(playerShip) &lt;= MINIMAP_MARKER_RANGE or bSpecialShip {
            var sprite;
            if bSpecialShip
                sprite = spr_minimapNPCImportant
            else
                sprite = spr_minimapNPC
            
            draw_sprite(sprite, 0, other.drawX + other.drawWidth * (x / room_width),
                                   other.drawY + other.drawHeight * (y / room_height))
        }
    }
    
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>429,429</point>
  </PhysicsShapePoints>
</object>
