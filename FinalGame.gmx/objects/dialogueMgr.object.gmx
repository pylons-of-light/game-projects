<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xOffset = 0
yOffset = 235

bVisible = false
bUsable = false

alpha = 0
portraitAlpha = 0

speaker = ''
speakerPortrait = -1 

text = ''
bNewPage = true

bExitingGame = false   //Exiting the game to the title screen


//TODO maybe mess with this so messages can render across rooms; but it's low-priority
g_msgText = ''
g_msgAlpha = 0
g_bMsgDisplayed = false


//TODO uncomment; the 1 is temporary. Maybe.
//alarmTime = room_speed / 20
defaultAlarmTime = 1
alarmTime = defaultAlarmTime
bSpeechDelayed = false

if g_lastChangedRoomTime != 0
    g_lastChangedRoomTime = current_time
else
    g_lastChangedRoomTime = current_time + 300   //Mandate a pause

if not ds_list_empty(g_dlg) {
    bVisible = true
    bUsable = true
    
    //We won't call alarm[0] here; we'll do it from the draw event instead, once we're sure
    //the dialogue box has faded in properly.
}

if room == rm_dungeon_test2 or room == rm_cave {
    MakeDungeonDetails()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if g_msgAlpha &gt; 0 {
    g_msgAlpha -= .05
    alarm[1] = room_speed / 20
}
else {
    g_msgText = ''
    g_bMsgDisplayed = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bExitingGame
    exit

//If we're trapped in a persistence battle, wait until we have a usable room.
//It's possible I should do this in a bunch of other situations in this game too,
//but this is the crucial one. If we just came into a persistent room that's a relic of an old
//playthrough, we don't want to remove critical dialogue from the dialogue queue.
//UPDATE: This should never actually happen since gameMgr should take care of all this in its
//Begin Step event, which should always run before this event. But still.
if ds_list_find_index(g_removePersistenceFrom, room) != -1 and room_persistent
    exit

if bSpeechDelayed {
    alarmTime = defaultAlarmTime
    bSpeechDelayed = false
}

if not ds_list_empty(g_dlg) {
    if bNewPage = true {
        alarmTime = defaultAlarmTime
        
        var pos = string_pos(' ', g_dlg[|0]);
        if pos == -1
            speaker = '?'
        else {
            oldSpeaker = speaker
            speaker = string_copy(g_dlg[|0], 1, pos-1)
            
            //Common names
            if speaker == 'goto' {
                speaker = ''
                var portal = string_copy(g_dlg[|0], 6, string_length(g_dlg[|0]) - 5);
                //show_message(portal)
                
                ds_list_delete(g_dlg, 0)
                
                if portal == 'ocean' {
                    g_shipX = g_shipLastPortX
                    g_shipY = g_shipLastPortY
                    g_shipDir = g_shipLastPortDir
                    room_goto(rm_ocean)
                }
                else if portal == 'cave' {
                    room_goto(rm_cave)
                }
                else if portal == 'final_ship_boss' {
                    room_goto(rm_final_ship_boss)
                }
                else if portal == 'title' {
                    bExitingGame = true
                    //g_gameRestart = true
                    instance_create(view_xview[0], view_yview[0], gameEndFadeOut)
                    //room_goto(rm_title)
                }
                else {
                    g_townId = portal
                    room_restart()
                }
                exit   //Not really necessary, since we're changing rooms no matter what
            }
            else if speaker == 'showmsg' {
                g_msgText = string_copy(g_dlg[|0], 9, string_length(g_dlg[|0]) - 8)
                g_msgAlpha = 0
                g_bMsgDisplayed = false
                g_msgTextCached = g_msgText
                alarm[1] = room_speed * 5
                
                ds_list_delete(g_dlg, 0)
                speaker = ''
                alarm[0] = 1
                exit
            }
            else if speaker == 'script' {
                var data = string_copy(g_dlg[|0], 8, string_length(g_dlg[|0]) - 7);
                var scriptIndex = asset_get_index(data);
                
                if scriptIndex != -1 {
                    script_execute(scriptIndex)
                }
                else
                    show_error("Unable to find script '" + data + "'", false)
                
                ds_list_delete(g_dlg, 0)
                speaker = ''
                alarm[0] = 1
                exit
            }
            else if speaker == 'playmusic' {
                var data = string_copy(g_dlg[|0], 11, string_length(g_dlg[|0]) - 10);
                var musicIndex = asset_get_index(data);
                
                if musicIndex != -1 {
                    PlayMusic(musicIndex)
                }
                else
                    show_error("Unable to find music '" + data + "'", false)
                
                ds_list_delete(g_dlg, 0)
                speaker = ''
                alarm[0] = 1
                exit
            }
            else if speaker == 'yesno' {
                var data = string_copy(g_dlg[|0], 7, string_length(g_dlg[|0]) - 6);
                
                var yes = instance_create(300, 362, choiceYes);
                var no = instance_create(568, 362, choiceNo);
                yes.questionId = data
                no.questionId = data
                
                //TODO probably don't delete this yet, or at least replace it with something else.
                ds_list_delete(g_dlg, 0)
                speaker = ''
                alarm[0] = 1
                exit
            }
            else if speaker == 'blankperson'
                speaker = ''
            else if speaker == 'l' or speaker == 'L'
                speaker = 'Lise'
            else if speaker == 'g' or speaker == 'G'
                speaker = 'Grant'
            else if speaker == 'lu' or speaker == 'Lu'
                speaker = 'Lucy'
            
            if speaker != oldSpeaker {
                speakerPortrait = GetPortrait(speaker)
                portraitAlpha = 0
            }
            
            g_dlg[|0] = string_copy(g_dlg[|0], pos+1, string_length(g_dlg[|0]) - pos)
            //show_message('doing  ' + g_dlg[|0])
        }
        bNewPage = false
    }
    if string_length(g_dlg[|0]) &gt; 0 {
        var char = string_char_at(g_dlg[|0], 0);
        g_dlg[|0] = string_copy(g_dlg[|0], 2, string_length(g_dlg[|0])-1)
        
        //TODO maybe someday: Make these things backslashable.
        if char == '@' {
            alarmTime = SPEECH_DELAY
            bSpeechDelayed = true
        }
        else if char == '%' {
            if string_length(g_dlg[|0]) &gt; 0 {
                var nextChar = string_char_at(g_dlg[|0], 0);
                
                if ord(nextChar) &gt;= ord('0') and ord(nextChar) &lt;= ord('9') {
                    g_dlg[|0] = string_copy(g_dlg[|0], 2, string_length(g_dlg[|0])-1)
                    alarmTime = real(nextChar)
                }
                else
                    alarmTime = defaultAlarmTime
            }
            else
                alarmTime = defaultAlarmTime
        }
        else
            text += char
        
        alarm[0] = alarmTime
    }
}
else {
    bUsable = false
    bNewPage = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_check_button_pressed(mb_left) {
    if bUsable and alarm[0] &lt; 0 {
        if not ds_list_empty(g_dlg) and string_length(g_dlg[|0]) == 0
            ds_list_delete(g_dlg, 0)
        
        text = ''
        bNewPage = true
        alarm[0] = alarmTime
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_control) and current_time - g_lastChangedRoomTime &gt; 200 and room != rm_final_ship_boss {
    g_lastChangedRoomTime = current_time
    room_goto_next()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_control) and current_time - g_lastChangedRoomTime &gt; 200 and room != rm_cave {
    g_lastChangedRoomTime = current_time
    room_goto_previous()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bUsable and alarm[0] &lt; 0 {
    if not ds_list_empty(g_dlg) and string_length(g_dlg[|0]) == 0
        ds_list_delete(g_dlg, 0)
    
    text = ''
    bNewPage = true
    alarm[0] = alarmTime
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bUsable and text != '' {
    if not ds_list_empty(g_dlg)
        ds_list_delete(g_dlg, 0)
    
    text = ''
    bNewPage = true
    alarm[0] = alarmTime
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if g_msgText != '' {
    if instance_exists(tutorialMgr)
        alarm[1] = room_speed * 5   //Prevent this from vanishing yet.
    if not g_bMsgDisplayed {
        if g_msgAlpha &lt; 1
            g_msgAlpha += .05
        if g_msgAlpha &gt;= 1 {
            g_msgAlpha = 1
            g_bMsgDisplayed = true
        }
    }
    draw_set_alpha(g_msgAlpha)
    draw_set_font(fnt_default)
    draw_set_colour(c_white)
    draw_set_halign(fa_center)
    draw_text(view_xview[0] + view_wview[0]/2, view_yview + 10, g_msgText)
    draw_set_alpha(1)   //Prevent problems with rendering various other things
}

if bVisible {
    if bUsable {
        if alpha != 1 {
            alpha += .05
            if alpha &gt; 1
                alpha = 1
            
            if alpha == 1 {
                //Did we just finish fading in? Check to see if we just transitioned from
                //a room while still having something left in our dialogue cache.
                if not ds_list_empty(g_dlg)
                    alarm[0] = alarmTime
            }
        }
    }
    else {
        if alpha != 0 {
            alpha -= .05
            if alpha &lt;= 0 {
                alpha = 0
                bVisible = false
                
                //Prevent the old portrait from flashing at the start of the next dialogue sequence
                speaker = ''
                speakerPortrait = -1
            }
        }
    }
    
    if alpha &gt; 0 {
        draw_set_alpha(alpha)
        
        var drawX = view_xview[0]+xOffset;
        var drawY = view_yview[0]+yOffset;
        
        draw_sprite(spr_dialogueBox, 0, drawX, drawY)
        
        if speakerPortrait != -1 {
            if bUsable and portraitAlpha != 1 {
                portraitAlpha += .1
                if portraitAlpha &gt; 1
                    portraitAlpha = 1
                draw_set_alpha(portraitAlpha)
            }
            
            draw_sprite(speakerPortrait, 0, drawX + 6, drawY + 45)
            
            draw_set_alpha(alpha)
        }
        
        draw_set_font(fnt_default)
        draw_set_colour(c_white)
        draw_set_halign(fa_left)
        
        draw_text(drawX + 229, drawY + 87, speaker)
        
        if not ds_list_empty(g_dlg) {
            var pos = string_pos(' ', g_dlg[|0]);
            var remainingWord = '';
            if pos != -1
                remainingWord = string_copy(g_dlg[|0], 1, pos-1);
            draw_text(drawX + 234, drawY + 115, ParagraphedText(text, remainingWord))
        }
        else
            draw_text(drawX + 234, drawY + 115, ParagraphedText(text, ''))
        //draw_text_ext(x + 234, y + 115, text, 30, DIALOGUE_DRAW_WIDTH)   //TODO remove
        
        draw_set_alpha(1)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
