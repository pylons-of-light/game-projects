<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_merchantShip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>npcShip</parentName>
  <maskName>spr_shipMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

//Overridden by navalMgr
destinationX = town1Port.x
destinationY = town1Port.y

maxSpeed = 1
mySpeed = maxSpeed / 4
frame = 0

bHostile = false

shipHealth = SHIP_HEALTH_MAX * .75
dealCannonDamage = SHIP_HEALTH_MAX / 12
gold = 10 * irandom_range(10, 25)

//Occasionally, create a weak ship
if random(1) &lt;= .35 {
    maxSpeed = .7
    mySpeed = maxSpeed / 4
    shipHealth = SHIP_HEALTH_MAX * .5
    dealCannonDamage = SHIP_HEALTH_MAX / 8
    gold = 10 * irandom_range(7, 15)
    //image_blend = make_colour_hsv(155, 205, 255)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bHostile = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not ds_list_empty(g_dlg) or instance_exists(tutorialMgr)
    exit

//Don't do anything if a cannonball exists and we're far away.
//if instance_number(cannonball) &gt; 9 {
if instance_exists(cannonball) {
    /*
    if x &lt; view_xview[0] - HALF_SHIP or x &gt; view_xview[0] + view_wview[0] + HALF_SHIP
       or y &lt; view_yview[0] - HALF_SHIP or y &gt; view_yview[0] + view_hview[0] + HALF_SHIP {
       exit
    }
    */
    if distance_to_object(playerShip) &gt; MINIMAP_MARKER_RANGE
        exit
}

event_inherited()

++frame

var realDir, nearestCb;

//TODO improve this so fleeing happens properly (use bFleeing or something) and the ship moves perpendicularly

nearestCb = instance_nearest(x, y, cannonball)
if nearestCb != noone and nearestCb.sourceShip != id and distance_to_object(nearestCb) &lt; 60 {
    mp_potential_step_object(nearestCb.x, nearestCb.y, -mySpeed*2, navalBlock)   //TODO why need * 2?
    realDir = direction - 180
    if realDir &lt; 0
        realDir += 360
}
else {
    mp_potential_step_object(destinationX, destinationY, mySpeed, navalBlock)
    realDir = direction
}

/*
mp_potential_step_object(playerShip.x, playerShip.y, 0, navalBlock)   //TODO remove
realDir = direction   //TODO remove
*/

if bDying {
    mySpeed *= 0.99
    exit
}

NpcShipAdjustImageAndSpeed(realDir)

if bHostile {
    TryNpcShipAdjacentFire()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="navalBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TODO why is this necessary, if the pathfinding avoids these objects?
ShipCollide()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="townPort">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bDying = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>76,76</point>
  </PhysicsShapePoints>
</object>
