<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_warship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>npcShip</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

destination = town1Port

maxSpeed = 1
mySpeed = maxSpeed / 4
frame = 0

bHostile = true
bChasing = false
bTurningToFire = false

shipHealth = SHIP_HEALTH_MAX * 1
dealCannonDamage = SHIP_HEALTH_MAX / 15
gold = 10 * random_range(5, 30)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bChasing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bHostile = false
bTurningToFire = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

++frame

var realDir, dirDifference, nearestCb;

//TODO improve this so fleeing happens properly (use bFleeing or something) and the ship moves perpendicularly

if not bTurningToFire {
    nearestCb = instance_nearest(x, y, cannonball)
    if nearestCb.sourceShip != id and distance_to_object(nearestCb) &lt; 100 {
        mp_potential_step_object(nearestCb.x, nearestCb.y, -mySpeed*2, navalBlock)   //TODO why need * 2?
        realDir = direction - 180
        if realDir &lt; 0
            realDir += 360
    }
    else if bChasing or distance_to_object(playerShip) &lt; 200 {
        mp_potential_step_object(playerShip.x, playerShip.y, mySpeed, navalBlock)
        realDir = direction
        bChasing = true
        
        if alarm[1] &lt; 0 and distance_to_object(playerShip) &gt; 300
            alarm[1] = room_speed * 5
    }
    else {
        mp_potential_step_object(destination.x, destination.y, mySpeed, navalBlock)
        realDir = direction
    }
    
    /*
    mp_potential_step_object(playerShip.x, playerShip.y, 0, navalBlock)   //TODO remove
    realDir = direction   //TODO remove
    */
}

if bDying {
    mySpeed *= 0.99
    exit
}

/*
if bHostile {
    if bTurningToFire {
        speed = mySpeed / 5
        var goalDir = point_direction(x, y, playerShip.x, playerShip.y);
        //TODO account for 360-degree nonsense
        if direction &lt; goalDir
            direction += 5
        if direction &gt; goalDir
            direction -= 5
        realDir = direction
        
        TryNpcShipAdjacentFire()
    }
    else {
        if current_time - cbFireDelay &lt; lastFiredTime {
            if random(1) &lt; .0 {   //TODO change back to .1 or something
                bTurningToFire = true
                //show_message("ttf")
            }
            else
                TryNpcShipAdjacentFire()
        }
    }
}
*/
TryNpcShipAdjacentFire()


//Adjust image dir to match real dir

var bAdjustDir = false;
dirDifference = abs(image_angle - realDir)
if dirDifference &gt; 180 {
    dirDifference = 360 - dirDifference
    bAdjustDir = true
}

if dirDifference &gt; 2 {
    mySpeed = maxSpeed * (1 - (dirDifference / 360))
}
else if mySpeed &lt; maxSpeed {
    mySpeed = min(mySpeed + .1, maxSpeed)
}

var tempAngle;
if frame mod 2 == 0 {
    var diffMetric = 5
    if dirDifference &gt; diffMetric {
        //show_message(string(image_angle) + " " + string(realDir))
        if image_angle &lt; realDir {
            if not bAdjustDir
                tempAngle = image_angle + diffMetric
            else {
                tempAngle = image_angle - diffMetric
            }
        }
        else {
            if not bAdjustDir
                tempAngle = image_angle - diffMetric
            else
                tempAngle = image_angle + diffMetric
        }
        
        if tempAngle &lt; 0
            tempAngle += 360
        if tempAngle &gt;= 360
            tempAngle -= 360
        image_angle = tempAngle
    }
    else {
        if bAdjustDir {
            smaller = min(image_angle, realDir) + 360
            larger = max(image_angle, realDir)
            image_angle = (smaller + larger) / 2 - 360;
        }
        else
            image_angle = (image_angle + realDir) / 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="navalBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ShipCollide()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>75,18</point>
    <point>76,76</point>
  </PhysicsShapePoints>
</object>
